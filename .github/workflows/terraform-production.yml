name: 'Terraform Production'
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    strategy:
      matrix:
        include:
        - customer: customer_1
          account: AWS_CUSTOMER1_ACCOUNT

    name: 'Terraform Deploy Production'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    env:
      working-directory: terraform
      TF_WORKSPACE: ${{ matrix.customer }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure Terraform
      uses: hashicorp/setup-terraform@v3

    # Configure AWS credentials for production
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::${{ secrets[matrix.account] }}:role/GitHubInfraAccessRole

    - name: Get Var file
      run: |
        chmod +x ./scripts/generate_tfvars.sh
        ./scripts/generate_tfvars.sh ${{env.TF_WORKSPACE}}

    - name: Terraform fmt
      id: fmt
      run: |
        terraform fmt ${{env.TF_WORKSPACE}}.tfvars
        terraform fmt -check -recursive
      working-directory: terraform
      continue-on-error: true

    - name: Terraform Init
      id: init
      working-directory: terraform
      run: terraform init

    - name: Terraform Validate
      id: validate
      working-directory: terraform
      run: terraform validate

    - name: Terraform Plan
      id: plan
      working-directory: terraform
      run: terraform plan --var-file=$(terraform workspace show).tfvars --out=plan

    - name: Plan output
      id: output
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GH_PAT }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          ### Workspace

          \`${process.env.TF_WORKSPACE}\`

          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>

          \`\`\`hcl
          ${process.env.PLAN}
          \`\`\`

          </details>

          **Pusher**: @${{ github.actor }}
          **Action**: ${{ github.event_name }}
          `;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply Plan
      id: apply
      working-directory: terraform
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply plan
